package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
	"github.com/postcert/entitlements/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (EntitlementGroup)
// DB Table: Plural (entitlement_groups)
// Resource: Plural (EntitlementGroups)
// Path: Plural (/entitlement_groups)
// View Template Folder: Plural (/templates/entitlement_groups/)

// EntitlementGroupsResource is the resource for the EntitlementGroup model
type EntitlementGroupsResource struct {
	buffalo.Resource
}

// List gets all EntitlementGroups. This function is mapped to the path
// GET /entitlement_groups
func (v EntitlementGroupsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	entitlementGroups := &models.EntitlementGroups{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all EntitlementGroups from the DB
	if err := q.All(entitlementGroups); err != nil {
		return errors.WithStack(err)
	}

	// Make EntitlementGroups available inside the html template
	c.Set("entitlementGroups", entitlementGroups)

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.HTML("entitlement_groups/index.html"))
}

// Show gets the data for one EntitlementGroup. This function is mapped to
// the path GET /entitlement_groups/{entitlement_group_id}
func (v EntitlementGroupsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty EntitlementGroup
	entitlementGroup := &models.EntitlementGroup{}

	// To find the EntitlementGroup the parameter entitlement_group_id is used.
	if err := tx.Find(entitlementGroup, c.Param("entitlement_group_id")); err != nil {
		return c.Error(404, err)
	}

	// Make entitlementGroup available inside the html template
	c.Set("entitlementGroup", entitlementGroup)

	return c.Render(200, r.HTML("entitlement_groups/show.html"))
}

// New renders the form for creating a new EntitlementGroup.
// This function is mapped to the path GET /entitlement_groups/new
func (v EntitlementGroupsResource) New(c buffalo.Context) error {
	// Make entitlementGroup available inside the html template
	c.Set("entitlementGroup", &models.EntitlementGroup{})

	return c.Render(200, r.HTML("entitlement_groups/new.html"))
}

// Create adds a EntitlementGroup to the DB. This function is mapped to the
// path POST /entitlement_groups
func (v EntitlementGroupsResource) Create(c buffalo.Context) error {
	// Allocate an empty EntitlementGroup
	entitlementGroup := &models.EntitlementGroup{}

	// Bind entitlementGroup to the html form elements
	if err := c.Bind(entitlementGroup); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(entitlementGroup)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make entitlementGroup available inside the html template
		c.Set("entitlement_group", entitlementGroup)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("entitlement_groups/new.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "EntitlementGroup was created successfully")

	// and redirect to the entitlement_groups index page
	return c.Redirect(302, "/entitlement_groups/%s", entitlementGroup.ID)
}

// Edit renders a edit form for a EntitlementGroup. This function is
// mapped to the path GET /entitlement_groups/{entitlement_group_id}/edit
func (v EntitlementGroupsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty EntitlementGroup
	entitlementGroup := &models.EntitlementGroup{}

	if err := tx.Find(entitlementGroup, c.Param("entitlement_group_id")); err != nil {
		return c.Error(404, err)
	}

	// Make entitlementGroup available inside the html template
	c.Set("entitlementGroup", entitlementGroup)
	return c.Render(200, r.HTML("entitlement_groups/edit.html"))
}

// Update changes a EntitlementGroup in the DB. This function is mapped to
// the path PUT /entitlement_groups/{entitlement_group_id}
func (v EntitlementGroupsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty EntitlementGroup
	entitlementGroup := &models.EntitlementGroup{}

	if err := tx.Find(entitlementGroup, c.Param("entitlement_group_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind EntitlementGroup to the html form elements
	if err := c.Bind(entitlementGroup); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(entitlementGroup)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make entitlementGroup available inside the html template
		c.Set("entitlement_group", entitlementGroup)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("entitlement_groups/edit.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "EntitlementGroup was updated successfully")

	// and redirect to the entitlement_groups index page
	return c.Redirect(302, "/entitlement_groups/%s", entitlementGroup.ID)
}

// Destroy deletes a EntitlementGroup from the DB. This function is mapped
// to the path DELETE /entitlement_groups/{entitlement_group_id}
func (v EntitlementGroupsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty EntitlementGroup
	entitlementGroup := &models.EntitlementGroup{}

	// To find the EntitlementGroup the parameter entitlement_group_id is used.
	if err := tx.Find(entitlementGroup, c.Param("entitlement_group_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(entitlementGroup); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "EntitlementGroup was destroyed successfully")

	// Redirect to the entitlement_groups index page
	return c.Redirect(302, "/entitlement_groups")
}
