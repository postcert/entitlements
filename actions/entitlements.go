package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
	"github.com/postcert/entitlements/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Entitlement)
// DB Table: Plural (entitlements)
// Resource: Plural (Entitlements)
// Path: Plural (/entitlements)
// View Template Folder: Plural (/templates/entitlements/)

// EntitlementsResource is the resource for the Entitlement model
type EntitlementsResource struct {
	buffalo.Resource
}

// List gets all Entitlements. This function is mapped to the path
// GET /entitlements
func (v EntitlementsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	entitlements := &models.Entitlements{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Entitlements from the DB
	if err := q.All(entitlements); err != nil {
		return errors.WithStack(err)
	}

	// Make Entitlements available inside the html template
	c.Set("entitlements", entitlements)

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.HTML("entitlements/index.html"))
}

// Show gets the data for one Entitlement. This function is mapped to
// the path GET /entitlements/{entitlement_id}
func (v EntitlementsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Entitlement
	entitlement := &models.Entitlement{}

	// To find the Entitlement the parameter entitlement_id is used.
	if err := tx.Find(entitlement, c.Param("entitlement_id")); err != nil {
		return c.Error(404, err)
	}

	// Make entitlement available inside the html template
	c.Set("entitlement", entitlement)

	return c.Render(200, r.HTML("entitlements/show.html"))
}

// New renders the form for creating a new Entitlement.
// This function is mapped to the path GET /entitlements/new
func (v EntitlementsResource) New(c buffalo.Context) error {
	// Make entitlement available inside the html template
	c.Set("entitlement", &models.Entitlement{})

	return c.Render(200, r.HTML("entitlements/new.html"))
}

// Create adds a Entitlement to the DB. This function is mapped to the
// path POST /entitlements
func (v EntitlementsResource) Create(c buffalo.Context) error {
	// Allocate an empty Entitlement
	entitlement := &models.Entitlement{}

	// Bind entitlement to the html form elements
	if err := c.Bind(entitlement); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(entitlement)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make entitlement available inside the html template
		c.Set("entitlement", entitlement)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("entitlements/new.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Entitlement was created successfully")

	// and redirect to the entitlements index page
	return c.Redirect(302, "/entitlements/%s", entitlement.ID)
}

// Edit renders a edit form for a Entitlement. This function is
// mapped to the path GET /entitlements/{entitlement_id}/edit
func (v EntitlementsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Entitlement
	entitlement := &models.Entitlement{}

	if err := tx.Find(entitlement, c.Param("entitlement_id")); err != nil {
		return c.Error(404, err)
	}

	// Make entitlement available inside the html template
	c.Set("entitlement", entitlement)
	return c.Render(200, r.HTML("entitlements/edit.html"))
}

// Update changes a Entitlement in the DB. This function is mapped to
// the path PUT /entitlements/{entitlement_id}
func (v EntitlementsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Entitlement
	entitlement := &models.Entitlement{}

	if err := tx.Find(entitlement, c.Param("entitlement_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Entitlement to the html form elements
	if err := c.Bind(entitlement); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(entitlement)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make entitlement available inside the html template
		c.Set("entitlement", entitlement)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("entitlements/edit.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Entitlement was updated successfully")

	// and redirect to the entitlements index page
	return c.Redirect(302, "/entitlements/%s", entitlement.ID)
}

// Destroy deletes a Entitlement from the DB. This function is mapped
// to the path DELETE /entitlements/{entitlement_id}
func (v EntitlementsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Entitlement
	entitlement := &models.Entitlement{}

	// To find the Entitlement the parameter entitlement_id is used.
	if err := tx.Find(entitlement, c.Param("entitlement_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(entitlement); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Entitlement was destroyed successfully")

	// Redirect to the entitlements index page
	return c.Redirect(302, "/entitlements")
}
